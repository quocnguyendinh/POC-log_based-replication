{
  "plugin_type": "loaders",
  "name": "target-clickhouse",
  "namespace": "target_clickhouse",
  "variant": "shaped-ai",
  "label": "Clickhouse",
  "docs": "https://hub.meltano.com/loaders/target-clickhouse--shaped-ai",
  "repo": "https://github.com/shaped-ai/target-clickhouse",
  "pip_url": "git+https://github.com/shaped-ai/target-clickhouse.git",
  "executable": "target-clickhouse",
  "description": "Loader for Clickhouse database.",
  "logo_url": "https://hub.meltano.com/assets/logos/loaders/clickhouse.png",
  "capabilities": [
    "about",
    "hard-delete",
    "schema-flattening",
    "stream-maps"
  ],
  "settings_group_validation": [
    [
      "sqlalchemy_url"
    ]
  ],
  "settings": [
    {
      "name": "add_record_metadata",
      "kind": "boolean",
      "label": "Add Record Metadata",
      "description": "Add metadata to records."
    },
    {
      "name": "batch_size_rows",
      "kind": "integer",
      "label": "Batch Size Rows",
      "description": "Maximum number of rows in each batch."
    },
    {
      "name": "cluster_name",
      "kind": "string",
      "label": "Cluster Name",
      "description": "The cluster to create tables in. This is passed as the `clickhouse_cluster` argument when creating a table. [documentation](https://clickhouse.com/docs/en/sql-reference/distributed-ddl) can be found here."
    },
    {
      "name": "database",
      "kind": "string",
      "value": "default",
      "label": "Database",
      "description": "Database name"
    },
    {
      "name": "default_target_schema",
      "kind": "string",
      "label": "Default Target Schema",
      "description": "The default target database schema name to use for all streams."
    },
    {
      "name": "driver",
      "kind": "options",
      "value": "http",
      "label": "Driver",
      "description": "Driver type",
      "options": [
        {
          "label": "Http",
          "value": "http"
        },
        {
          "label": "Native",
          "value": "native"
        },
        {
          "label": "Asynch",
          "value": "asynch"
        }
      ]
    },
    {
      "name": "engine_type",
      "kind": "options",
      "label": "Engine Type",
      "description": "The engine type to use for the table.",
      "options": [
        {
          "label": "Mergetree",
          "value": "MergeTree"
        },
        {
          "label": "Replacingmergetree",
          "value": "ReplacingMergeTree"
        },
        {
          "label": "Summingmergetree",
          "value": "SummingMergeTree"
        },
        {
          "label": "Aggregatingmergetree",
          "value": "AggregatingMergeTree"
        },
        {
          "label": "Replicatedmergetree",
          "value": "ReplicatedMergeTree"
        },
        {
          "label": "Replicatedreplacingmergetree",
          "value": "ReplicatedReplacingMergeTree"
        },
        {
          "label": "Replicatedsummingmergetree",
          "value": "ReplicatedSummingMergeTree"
        },
        {
          "label": "Replicatedaggregatingmergetree",
          "value": "ReplicatedAggregatingMergeTree"
        }
      ]
    },
    {
      "name": "faker_config.locale",
      "kind": "array",
      "label": "Faker Config Locale",
      "description": "One or more LCID locale strings to produce localized output for: https://faker.readthedocs.io/en/master/#localization"
    },
    {
      "name": "faker_config.seed",
      "kind": "string",
      "label": "Faker Config Seed",
      "description": "Value to seed the Faker generator for deterministic output: https://faker.readthedocs.io/en/master/#seeding-the-generator"
    },
    {
      "name": "flattening_enabled",
      "kind": "boolean",
      "label": "Flattening Enabled",
      "description": "'True' to enable schema flattening and automatically expand nested properties."
    },
    {
      "name": "flattening_max_depth",
      "kind": "integer",
      "label": "Flattening Max Depth",
      "description": "The max depth to flatten schemas."
    },
    {
      "name": "hard_delete",
      "kind": "boolean",
      "value": false,
      "label": "Hard Delete",
      "description": "Hard delete records."
    },
    {
      "name": "host",
      "kind": "string",
      "value": "localhost",
      "label": "Host",
      "description": "Database host"
    },
    {
      "name": "load_method",
      "kind": "options",
      "value": "append-only",
      "label": "Load Method",
      "description": "The method to use when loading data into the destination. `append-only` will always write all input records whether that records already exists or not. `upsert` will update existing records and insert new records. `overwrite` will delete all existing records and insert all input records.",
      "options": [
        {
          "label": "Append Only",
          "value": "append-only"
        },
        {
          "label": "Upsert",
          "value": "upsert"
        },
        {
          "label": "Overwrite",
          "value": "overwrite"
        }
      ]
    },
    {
      "name": "optimize_after",
      "kind": "boolean",
      "value": false,
      "label": "Optimize After",
      "description": "Run 'OPTIMIZE TABLE' after data insert. Useful whentable engine removes duplicate rows."
    },
    {
      "name": "password",
      "kind": "string",
      "label": "Password",
      "description": "Username password",
      "sensitive": true
    },
    {
      "name": "port",
      "kind": "integer",
      "value": 8123,
      "label": "Port",
      "description": "Database connection port"
    },
    {
      "name": "replica_name",
      "kind": "string",
      "label": "Replica Name",
      "description": "The `replica_name` for replicated tables. This is required when using any of the replication engines."
    },
    {
      "name": "secure",
      "kind": "boolean",
      "value": false,
      "label": "Secure",
      "description": "Should the connection be secure"
    },
    {
      "name": "sqlalchemy_url",
      "kind": "string",
      "label": "Sqlalchemy URL",
      "description": "The SQLAlchemy connection string for the ClickHouse database. Used if set, otherwise separate settings are used"
    },
    {
      "name": "stream_map_config",
      "kind": "object",
      "label": "Stream Map Config",
      "description": "User-defined config values to be used within map expressions."
    },
    {
      "name": "stream_maps",
      "kind": "object",
      "label": "Stream Maps",
      "description": "Config object for stream maps capability. For more information check out [Stream Maps](https://sdk.meltano.com/en/latest/stream_maps.html)."
    },
    {
      "name": "table_name",
      "kind": "string",
      "label": "Table Name",
      "description": "The name of the table to write to. Defaults to stream name."
    },
    {
      "name": "table_path",
      "kind": "string",
      "label": "Table Path",
      "description": "The table path for replicated tables. This is required when using any of the replication engines. Check out the [documentation](https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replication#replicatedmergetree-parameters) for more information. Use `$table_name` to substitute the table name."
    },
    {
      "name": "username",
      "kind": "string",
      "value": "default",
      "label": "Username",
      "description": "Database user"
    },
    {
      "name": "validate_records",
      "kind": "boolean",
      "value": true,
      "label": "Validate Records",
      "description": "Whether to validate the schema of the incoming streams."
    },
    {
      "name": "verify",
      "kind": "boolean",
      "value": true,
      "label": "Verify",
      "description": "Should secure connection need to verify SSL/TLS"
    }
  ]
}